apply plugin: "com.android.application"
apply plugin: 'com.sensorsdata.analytics.android'

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
        entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.letotecn"
        minSdkVersion 16
        targetSdkVersion 26
        renderscriptTargetApi 20
        vectorDrawables.useSupportLibrary = true
        renderscriptSupportModeEnabled true
        multiDexEnabled true
//        multiDexKeepProguard file('multidex.pro')
        versionCode 63
        versionName "3.30.0"
        ndk {
//            abiFilters "armeabi-v7a", "x86"
            abiFilters "armeabi-v7a"
        }
    }
    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
//            include "armeabi-v7a", "x86"
            include "armeabi-v7a"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            multiDexKeepProguard file('multidex-config.pro')
            signingConfig signingConfigs.release
            buildConfigField "String", "CODEPUSH_KEY", '"l-rIKn1SHIe38M0qFqeU1dS1SqBd7889e5a6-1fdb-4360-b9ed-2bc92e1fbf90"'
        }
        releaseStaging {
            matchingFallbacks = ['release', 'debug']
            buildConfigField "String", "CODEPUSH_KEY", '"ZeqDg5z1FXGTQ6clMhpcV_LNFdsQ7889e5a6-1fdb-4360-b9ed-2bc92e1fbf90"'
        }
        debug {
            signingConfig signingConfigs.release
            buildConfigField "String", "CODEPUSH_KEY", '""'
        }

    }
    // applicationVariants are e.g. debug, release
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            // def versionCodes = ["armeabi-v7a":1, "x86":2]
            outputFileName = "letote_" + productFlavors[0].name + "_" + "${variant.versionName}.apk"
        }
    }

    flavorDimensions "default"

    productFlavors {
        //use react-native run-anroid --variant [flavorBuildType] instead react-native run-anroid
        //it will be more fast for build
        //flavorBuildType could be, as following
        //flavor1Debug
        letote {}
        huawei {}
        yingyongbao {}
        vivo {}
        oppo {}
        xiaomi {}
        _360 {}
        ali {}
        baidu {}
    }

    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [BAIDU_CHANNEL: name]
    }

    configurations.all {
        resolutionStrategy {
            force 'com.android.support:support-media-compat:28.0.0'
            // Force all of the primary support libraries to use the same version.
            force 'com.android.support:appcompat-v7:28.0.0'
            force 'com.android.support:support-v7:28.0.0'
            force 'com.facebook.fresco:imagepipeline:1.10.0'
            force 'com.facebook.fresco:imagepipeline-base:1.10.0'
            force 'com.facebook.fresco:imagepipeline-okhttp3:1.10.0'
            force 'com.facebook.fresco:fresco:1.10.0'
            force 'com.facebook.fresco:fbcore:1.10.0'
            force 'com.facebook.fresco:drawee:1.10.0'
            force 'com.facebook.fresco:animated-base:1.10.0'
            force 'com.facebook.fresco:animated-drawable:1.10.0'
            force 'com.facebook.fresco:animated-gif:1.10.0'
        }
    }
    // Keep the following configuration in order to target Java 8.
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

}

dependencies {
    implementation project(':react-native-svg')
    implementation project(':react-native-webview')
    implementation project(':react-native-view-shot')
    implementation project(':react-native-adhoc')
    implementation project(':react-native-code-push')
    implementation project(':react-native-gesture-handler')
    implementation project(':react-native-syan-image-picker')
    implementation project(':react-native-letote-jverification')
    implementation project(':react-native-letote-fast-image')
    implementation project(':react-native-letote-alipay')
    implementation project(':react-native-letote-jdpay')
    implementation project(':react-native-letote-sensors')
    implementation project(':react-native-appsflyer')
    implementation project(':react-native-letote-intent')
    implementation project(':react-native-video')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-splash-screen')
    implementation project(':react-native-spinkit')
    implementation project(':react-native-letote-picker')
    implementation project(':react-native-letote-xmpush')
    implementation project(':react-native-letote-wechat')
    implementation project(':react-native-letote-upgrade-android')
    implementation project(':react-native-letote-udesk')
    implementation project(':react-native-letote-baidumjt')
    implementation project(':react-native-letote-android-webview')
    implementation project(':react-native-cookies')
    implementation project(':lottie-react-native')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'com.facebook.react:react-native:+'
    implementation 'com.facebook.fresco:animated-gif:+'
}

// Run this once to be able to run the application with BUCK
// puts all implementation dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
